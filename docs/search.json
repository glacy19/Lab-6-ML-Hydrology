[
  {
    "objectID": "lab6.html",
    "href": "lab6.html",
    "title": "Lab 6: Machine Learning in Hydrology",
    "section": "",
    "text": "# loading in libraries\nlibrary(tidyverse)\n\nWarning: package 'readr' was built under R version 4.4.3\n\n\nWarning: package 'purrr' was built under R version 4.4.3\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(tidymodels)\n\n── Attaching packages ────────────────────────────────────── tidymodels 1.2.0 ──\n✔ broom        1.0.7     ✔ rsample      1.2.1\n✔ dials        1.3.0     ✔ tune         1.2.1\n✔ infer        1.0.7     ✔ workflows    1.1.4\n✔ modeldata    1.4.0     ✔ workflowsets 1.1.0\n✔ parsnip      1.3.1     ✔ yardstick    1.3.1\n✔ recipes      1.1.0     \n\n\nWarning: package 'scales' was built under R version 4.4.3\n\n\nWarning: package 'parsnip' was built under R version 4.4.3\n\n\n── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──\n✖ scales::discard() masks purrr::discard()\n✖ dplyr::filter()   masks stats::filter()\n✖ recipes::fixed()  masks stringr::fixed()\n✖ dplyr::lag()      masks stats::lag()\n✖ yardstick::spec() masks readr::spec()\n✖ recipes::step()   masks stats::step()\n• Learn how to get started at https://www.tidymodels.org/start/\n\nlibrary(powerjoin)\n\nWarning: package 'powerjoin' was built under R version 4.4.3\n\nlibrary(glue)\n\nWarning: package 'glue' was built under R version 4.4.3\n\nlibrary(vip)\n\nWarning: package 'vip' was built under R version 4.4.3\n\n\n\nAttaching package: 'vip'\n\nThe following object is masked from 'package:utils':\n\n    vi\n\nlibrary(baguette)\n\nWarning: package 'baguette' was built under R version 4.4.3\n\n\n\n# loading in CAMELS data set \nroot  &lt;- 'https://gdex.ucar.edu/dataset/camels/file'\n\n# downloading documentation pdf\ndownload.file('https://gdex.ucar.edu/dataset/camels/file/camels_attributes_v2.0.pdf', \n              'data/camels_attributes_v2.0.pdf')\n\n\n#Getting Basin Characteristics \ntypes &lt;- c(\"clim\", \"geol\", \"soil\", \"topo\", \"vege\", \"hydro\")\n\nlibrary(glue)\n# Where the files live online\nremote_files &lt;- glue('{root}/camels_{types}.txt')\n\n# where we want to download the data ...\nlocal_files   &lt;- glue('data/camels_{types}.txt')\n\nlibrary(purrr)\nwalk2(remote_files, local_files, download.file, quiet = TRUE)\n\nlibrary(readr)\nlibrary(MAP)\n\nWarning: package 'MAP' was built under R version 4.4.3\n\n\nLoading required package: flexmix\n\n\nWarning: package 'flexmix' was built under R version 4.4.3\n\n\nLoading required package: lattice\n\n\nWarning: package 'lattice' was built under R version 4.4.3\n\n\nLoading required package: Matrix\n\n\nWarning: package 'Matrix' was built under R version 4.4.3\n\n\n\nAttaching package: 'Matrix'\n\n\nThe following objects are masked from 'package:tidyr':\n\n    expand, pack, unpack\n\nlibrary(powerjoin)\n# Read and merge data\ncamels &lt;- map(local_files, read_delim, show_col_types = FALSE) \n\ncamels &lt;-power_full_join(camels ,by = 'gauge_id')\n\nQuestion 1: From the documentation PDF, report what zero_q_freq represents by making a map of the sites\n\nggplot(data = camels, aes(x = gauge_lon, y = gauge_lat)) +\n  borders(\"state\", colour = \"gray50\") +\n  geom_point(aes(color = q_mean)) +\n  scale_color_gradient(low = \"pink\", high = \"dodgerblue\") +\n  ggthemes::theme_map()\n\n\n\n\n\n\n\n\nzero_q_freq represents the the frequency of days with no flow per day (mm).\nQuestion 2: Map Models\n\nlibrary(tidyverse)\n#model prep\ncamels |&gt; \n  select(aridity, p_mean, q_mean) |&gt; \n  drop_na() |&gt; \n  cor()\n\n           aridity     p_mean     q_mean\naridity  1.0000000 -0.7550090 -0.5817771\np_mean  -0.7550090  1.0000000  0.8865757\nq_mean  -0.5817771  0.8865757  1.0000000\n\n# visual EDA\n\n# Create a scatter plot of aridity vs rainfall\nggplot(camels, aes(x = aridity, y = p_mean)) +\n  # Add points colored by mean flow\n  geom_point(aes(color = q_mean)) +\n  # Add a linear regression line\n  geom_smooth(method = \"lm\", color = \"red\", linetype = 2) +\n  # Apply the viridis color scale\n  scale_color_viridis_c() +\n  # Add a title, axis labels, and theme (w/ legend on the bottom)\n  theme_linedraw() + \n  theme(legend.position = \"bottom\") + \n  labs(title = \"Aridity vs Rainfall vs Runnoff\", \n       x = \"Aridity\", \n       y = \"Rainfall\",\n       color = \"Mean Flow\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n#testing log-log relationship\n\nggplot(camels, aes(x = aridity, y = p_mean)) +\n  geom_point(aes(color = q_mean)) +\n  geom_smooth(method = \"lm\") +\n  scale_color_viridis_c() +\n  # Apply log transformations to the x and y axes\n  scale_x_log10() + \n  scale_y_log10() +\n  theme_linedraw() +\n  theme(legend.position = \"bottom\") + \n  labs(title = \"Aridity vs Rainfall vs Runnoff\", \n       x = \"Aridity\", \n       y = \"Rainfall\",\n       color = \"Mean Flow\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n# visualizing how a log trnasformation may benefit the q_mean data\n\nggplot(camels, aes(x = aridity, y = p_mean)) +\n  geom_point(aes(color = q_mean)) +\n  geom_smooth(method = \"lm\") +\n  # Apply a log transformation to the color scale\n  scale_color_viridis_c(trans = \"log\") +\n  scale_x_log10() + \n  scale_y_log10() +\n  theme_linedraw() +\n  theme(legend.position = \"bottom\",\n        # Expand the legend width ...\n        legend.key.width = unit(2.5, \"cm\"),\n        legend.key.height = unit(.5, \"cm\")) + \n  labs(title = \"Aridity vs Rainfall vs Runnoff\", \n       x = \"Aridity\", \n       y = \"Rainfall\",\n       color = \"Mean Flow\") \n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\nModel Building\n\n# starting with splitting the data\n\nset.seed(123)\n# Bad form to perform simple transformations on the outcome variable within a \n# recipe. So, we'll do it here.\ncamels &lt;- camels |&gt; \n  mutate(logQmean = log(q_mean))\n\n# Generate the split\ncamels_split &lt;- initial_split(camels, prop = 0.8)\ncamels_train &lt;- training(camels_split)\ncamels_test  &lt;- testing(camels_split)\n\ncamels_cv &lt;- vfold_cv(camels_train, v = 10)\n\n# pre processor, building recipe \n\n# Create a recipe to preprocess the data\nrec &lt;-  recipe(logQmean ~ aridity + p_mean, data = camels_train) %&gt;%\n  # Log transform the predictor variables (aridity and p_mean)\n  step_log(all_predictors()) %&gt;%\n  # Add an interaction term between aridity and p_mean\n  step_interact(terms = ~ aridity:p_mean) |&gt; \n  # Drop any rows with missing values in the pred\n  step_naomit(all_predictors(), all_outcomes())\n\n## fitting the lm to the data\n\n# Prepare the data\nbaked_data &lt;- prep(rec, camels_train) |&gt; \n  bake(new_data = NULL)\n\n# Interaction with lm\n#  Base lm sets interaction terms with the * symbol\nlm_base &lt;- lm(logQmean ~ aridity * p_mean, data = baked_data)\nsummary(lm_base)\n\n\nCall:\nlm(formula = logQmean ~ aridity * p_mean, data = baked_data)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-2.91162 -0.21601 -0.00716  0.21230  2.85706 \n\nCoefficients:\n               Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)    -1.77586    0.16365 -10.852  &lt; 2e-16 ***\naridity        -0.88397    0.16145  -5.475 6.75e-08 ***\np_mean          1.48438    0.15511   9.570  &lt; 2e-16 ***\naridity:p_mean  0.10484    0.07198   1.457    0.146    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.5696 on 531 degrees of freedom\nMultiple R-squared:  0.7697,    Adjusted R-squared:  0.7684 \nF-statistic: 591.6 on 3 and 531 DF,  p-value: &lt; 2.2e-16\n\n# Sanity Interaction term from recipe ... these should be equal!!\nsummary(lm(logQmean ~ aridity + p_mean + aridity_x_p_mean, data = baked_data))\n\n\nCall:\nlm(formula = logQmean ~ aridity + p_mean + aridity_x_p_mean, \n    data = baked_data)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-2.91162 -0.21601 -0.00716  0.21230  2.85706 \n\nCoefficients:\n                 Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)      -1.77586    0.16365 -10.852  &lt; 2e-16 ***\naridity          -0.88397    0.16145  -5.475 6.75e-08 ***\np_mean            1.48438    0.15511   9.570  &lt; 2e-16 ***\naridity_x_p_mean  0.10484    0.07198   1.457    0.146    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.5696 on 531 degrees of freedom\nMultiple R-squared:  0.7697,    Adjusted R-squared:  0.7684 \nF-statistic: 591.6 on 3 and 531 DF,  p-value: &lt; 2.2e-16\n\n## need to validate the lm_base on the test data; need to prep first, then bake and predict\n\ntest_data &lt;-  bake(prep(rec), new_data = camels_test)\ntest_data$lm_pred &lt;- predict(lm_base, newdata = test_data)\n\n\n#model eval: stat and vis\n\nmetrics(test_data, truth = logQmean, estimate = lm_pred)\n\n# A tibble: 3 × 3\n  .metric .estimator .estimate\n  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n1 rmse    standard       0.583\n2 rsq     standard       0.742\n3 mae     standard       0.390\n\nggplot(test_data, aes(x = logQmean, y = lm_pred, colour = aridity)) +\n  # Apply a gradient color scale\n  scale_color_gradient2(low = \"brown\", mid = \"orange\", high = \"darkgreen\") +\n  geom_point() +\n  geom_abline(linetype = 2) +\n  theme_linedraw() + \n  labs(title = \"Linear Model: Observed vs Predicted\",\n       x = \"Observed Log Mean Flow\",\n       y = \"Predicted Log Mean Flow\",\n       color = \"Aridity\")\n\n\n\n\n\n\n\n\nUsing a workflow instead: using linear_reg function to define a linear regression model, adding the recipe to the workflow, fitting the training data and extracting the model coefficients\n\n# Define model\nlm_model &lt;- linear_reg() |&gt;\n  # define the engine\n  set_engine(\"lm\") |&gt;\n  # define the mode\n  set_mode(\"regression\")\n\n# Instantiate a workflow ...\nlm_wf &lt;- workflow() |&gt;\n  # Add the recipe\n  add_recipe(rec) |&gt;\n  # Add the model\n  add_model(lm_model) |&gt;\n  # Fit the model to the training data\n  fit(data = camels_train) \n\n# Extract the model coefficients from the workflow\nsummary(extract_fit_engine(lm_wf))$coefficients\n\n                   Estimate Std. Error    t value     Pr(&gt;|t|)\n(Intercept)      -1.7758557 0.16364755 -10.851710 6.463654e-25\naridity          -0.8839738 0.16144589  -5.475357 6.745512e-08\np_mean            1.4843771 0.15511117   9.569762 4.022500e-20\naridity_x_p_mean  0.1048449 0.07198145   1.456555 1.458304e-01\n\n# From the base implementation\nsummary(lm_base)$coefficients\n\n                 Estimate Std. Error    t value     Pr(&gt;|t|)\n(Intercept)    -1.7758557 0.16364755 -10.851710 6.463654e-25\naridity        -0.8839738 0.16144589  -5.475357 6.745512e-08\np_mean          1.4843771 0.15511117   9.569762 4.022500e-20\naridity:p_mean  0.1048449 0.07198145   1.456555 1.458304e-01\n\n\nMaking predictions\n\nlm_data &lt;- augment(lm_wf, new_data = camels_test)\ndim(lm_data)\n\n[1] 135  61\n\n\nModel evaluation (default metrics): statistical and visual\n\n# creating a scatter plot of the observed vs predicted values\nmetrics(lm_data, truth = logQmean, estimate = .pred)\n\n# A tibble: 3 × 3\n  .metric .estimator .estimate\n  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n1 rmse    standard       0.583\n2 rsq     standard       0.742\n3 mae     standard       0.390\n\nggplot(lm_data, aes(x = logQmean, y = .pred, colour = aridity)) +\n  scale_color_viridis_c() +\n  geom_point() +\n  geom_abline() +\n  theme_linedraw()\n\n\n\n\n\n\n\n\nUsing a random forest model to predict mean stream flow:\n\nlibrary(baguette)\nrf_model &lt;- rand_forest() %&gt;%\n  set_engine(\"ranger\", importance = \"impurity\") %&gt;%\n  set_mode(\"regression\")\n\nrf_wf &lt;- workflow() %&gt;%\n  # Add the recipe\n  add_recipe(rec) %&gt;%\n  # Add the model\n  add_model(rf_model) %&gt;%\n  # Fit the model\n  fit(data = camels_train) \n\n\nrf_data &lt;- augment(rf_wf, new_data = camels_test)\ndim(rf_data)\n\n[1] 135  60\n\n\nModel evaluation (logQmean): statistical and visual\n\nmetrics(rf_data, truth = logQmean, estimate = .pred)\n\n# A tibble: 3 × 3\n  .metric .estimator .estimate\n  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n1 rmse    standard       0.588\n2 rsq     standard       0.740\n3 mae     standard       0.365\n\nggplot(rf_data, aes(x = logQmean, y = .pred, colour = aridity)) +\n  scale_color_viridis_c() +\n  geom_point() +\n  geom_abline() +\n  theme_linedraw()\n\n\n\n\n\n\n\n\nWorkflowset approach:\n\nwf &lt;- workflow_set(list(rec), list(lm_model, rf_model)) %&gt;%\n  workflow_map('fit_resamples', resamples = camels_cv) \n\nWarning: package 'ranger' was built under R version 4.4.3\n\nautoplot(wf)\n\n\n\n\n\n\n\nrank_results(wf, rank_metric = \"rsq\", select_best = TRUE)\n\n# A tibble: 4 × 9\n  wflow_id          .config .metric  mean std_err     n preprocessor model  rank\n  &lt;chr&gt;             &lt;chr&gt;   &lt;chr&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;int&gt; &lt;chr&gt;        &lt;chr&gt; &lt;int&gt;\n1 recipe_rand_fore… Prepro… rmse    0.564  0.0253    10 recipe       rand…     1\n2 recipe_rand_fore… Prepro… rsq     0.770  0.0260    10 recipe       rand…     1\n3 recipe_linear_reg Prepro… rmse    0.569  0.0260    10 recipe       line…     2\n4 recipe_linear_reg Prepro… rsq     0.770  0.0223    10 recipe       line…     2\n\n\nQuestion 3: Building XGBoost and Neural Network Model\n\n#defining the xgboost model\nxg_model &lt;- boost_tree() |&gt;\n  set_engine(\"xgboost\") |&gt;\n  set_mode(\"regression\")\n\n\n# building neural network model\nlibrary(baguette)\nnn_model &lt;- bag_mlp() |&gt;\n  set_engine(\"nnet\") |&gt;\n  set_mode(\"regression\")\n\n# evaluate models and compare with linear and random forest models\nworkflow &lt;- workflow_set(list(rec),list(linear = lm_model,\n                                        xgb = xg_model,\n                                        rf = rf_model,\n                                        nnet = nn_model))|&gt;\n  \nworkflow_map('fit_resamples', resamples = camels_cv)\n\nWarning: package 'xgboost' was built under R version 4.4.3\n\nautoplot(workflow)\n\n\n\n\n\n\n\n\nWhich of the 4 models would you move forward with?\nI will be moving forward with the linear_reg (“lm_model”) model because it has the smallest range for rsq values.\nQuestion 4: Data prep/ Data splitting to predict mean Stream flow; experiment with other predictors\n\n# starting with splitting the data\n\nset.seed(123)\n\nstreamflow &lt;- q_mean &lt;- camels |&gt; \n  mutate(logQmean = log(q_mean))\n\nstreamflow_split &lt;- initial_split(streamflow, prop = 0.75)\nstreamflow_train &lt;- training(streamflow_split)\nstreamflow_test  &lt;- testing(streamflow_split)\n\nstreamflow_fold &lt;- vfold_cv(streamflow_train, v = 10)\n\nModel Preparation:\n\ncamels |&gt; \n  select(runoff_ratio,baseflow_index, q_mean) |&gt; \n  drop_na() |&gt; \n  cor()\n\n               runoff_ratio baseflow_index    q_mean\nrunoff_ratio      1.0000000      0.3452424 0.8755618\nbaseflow_index    0.3452424      1.0000000 0.2339068\nq_mean            0.8755618      0.2339068 1.0000000\n\n\nI will be trying to see if model I build will be able to predict mean flow using the runoff ratio and the base flow index. “runoff_ratio” tells us the ratio of mean daily discharge to mean daily precipitation. “baseflow_index” tells us about the daily stream discharge.\nRecipe:\n\n# Create a recipe to preprocess the data\nrec2 &lt;-  recipe(logQmean ~ runoff_ratio + baseflow_index, data = streamflow_train) %&gt;%\n  # Log transform the predictor variables (aridity and p_mean)\n  step_log(all_predictors()) %&gt;%\n  # Add an interaction term between runoff_ratio and baseflow_index\n  step_interact(terms = ~ runoff_ratio:baseflow_index) |&gt; \n  # Drop any rows with missing values in the pred\n  step_naomit(all_predictors(), all_outcomes())\n\n## fitting the lm to the data\n\n# Prepare the data\nbaked_stream_data &lt;- prep(rec2, streamflow_train) |&gt; \n  bake(new_data = NULL) |&gt;\n  drop_na()\n\nI will be choosing the runoff_ratio and baseflow_index as variables for the recipe.\nDefine 3 models (randomForest needs to be included):\n\nrf_model2 &lt;- rand_forest() %&gt;%\n  set_engine(\"ranger\", importance = \"impurity\") %&gt;%\n  set_mode(\"regression\")\n\nlm_model2 &lt;- linear_reg() %&gt;%\n  set_engine(\"lm\") %&gt;%\n  set_mode(\"regression\")\n\nnn_model2 &lt;- bag_mlp() %&gt;%\n  set_engine(\"nnet\") %&gt;%\n  set_mode(\"regression\")\n\nWorkflow set:\n\n# Interaction with lm\n# Base lm sets interaction terms with the * symbol\n\n## need to validate the lm_stream_base on the stream test data; need to prep first, then bake and predict\nbaked_stream_data &lt;- baked_stream_data %&gt;% drop_na()\n\nbaked_stream_data &lt;- baked_stream_data %&gt;%\n  mutate(across(where(is.numeric), ~ ifelse(is.na(.x), median(.x, na.rm = TRUE), .x)))\n\nlm_stream_base &lt;- lm(logQmean ~ runoff_ratio * baseflow_index, data = baked_stream_data)\nsummary(lm_stream_base)\n\n\nCall:\nlm(formula = logQmean ~ runoff_ratio * baseflow_index, data = baked_stream_data)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-1.71372 -0.12748  0.01362  0.18747  0.89405 \n\nCoefficients:\n                            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)                  1.50582    0.04917  30.622   &lt;2e-16 ***\nrunoff_ratio                 1.41391    0.02809  50.341   &lt;2e-16 ***\nbaseflow_index              -0.08859    0.06117  -1.448    0.148    \nrunoff_ratio:baseflow_index  0.01176    0.02380   0.494    0.621    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.3093 on 498 degrees of freedom\nMultiple R-squared:  0.9331,    Adjusted R-squared:  0.9327 \nF-statistic:  2316 on 3 and 498 DF,  p-value: &lt; 2.2e-16\n\n# Sanity Interaction term from recipe ... these should be equal!!\nsummary(lm(logQmean ~ runoff_ratio + baseflow_index, data = baked_stream_data))\n\n\nCall:\nlm(formula = logQmean ~ runoff_ratio + baseflow_index, data = baked_stream_data)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-1.70926 -0.12782  0.01519  0.19012  0.87988 \n\nCoefficients:\n               Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)     1.48622    0.02905  51.166  &lt; 2e-16 ***\nrunoff_ratio    1.40346    0.01847  75.975  &lt; 2e-16 ***\nbaseflow_index -0.11415    0.03262  -3.499 0.000508 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.309 on 499 degrees of freedom\nMultiple R-squared:  0.9331,    Adjusted R-squared:  0.9328 \nF-statistic:  3479 on 2 and 499 DF,  p-value: &lt; 2.2e-16\n\nbaked_stream_data &lt;- prep(rec2, streamflow_train) |&gt; \n  bake(new_data = NULL)\n\nprepped_rec2 &lt;- prep(rec2, training = streamflow_train)\nbaked_stream_data &lt;- bake(prepped_rec2, new_data = streamflow_train)\n\n\nnew_wf &lt;- workflow_set(list(rec2), list(lm_model2, rf_model2, nn_model2)) %&gt;%\n  workflow_map('fit_resamples', resamples = camels_cv)\n\nEvaluation and ranking results:\n\nautoplot(new_wf)\n\n\n\n\n\n\n\nrank_results(new_wf, rank_metric = \"rsq\", select_best = TRUE)\n\n# A tibble: 6 × 9\n  wflow_id          .config .metric  mean std_err     n preprocessor model  rank\n  &lt;chr&gt;             &lt;chr&gt;   &lt;chr&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;int&gt; &lt;chr&gt;        &lt;chr&gt; &lt;int&gt;\n1 recipe_linear_reg Prepro… rmse    0.309 0.0111     10 recipe       line…     1\n2 recipe_linear_reg Prepro… rsq     0.933 0.00514    10 recipe       line…     1\n3 recipe_bag_mlp    Prepro… rmse    0.310 0.0115     10 recipe       bag_…     2\n4 recipe_bag_mlp    Prepro… rsq     0.932 0.00429    10 recipe       bag_…     2\n5 recipe_rand_fore… Prepro… rmse    0.341 0.00913    10 recipe       rand…     3\n6 recipe_rand_fore… Prepro… rsq     0.918 0.00461    10 recipe       rand…     3\n\n\nI think that linear regression model is best because it has the closest r squared value to 1 .\nExtract and Evaluate:\n\neval_wf &lt;- workflow() %&gt;%\n  add_formula(logQmean ~ runoff_ratio + baseflow_index) %&gt;%\n  add_model(lm_model2)\n   \nfitted_eval_wf &lt;- eval_wf %&gt;%\n  fit(data = streamflow_train)\n\nvip::vip(extract_fit_parsnip(fitted_eval_wf))\n\n\n\n\n\n\n\npredictions &lt;- augment (fitted_eval_wf, new_data = streamflow_test) %&gt;%\n  mutate(diff = abs(logQmean - .pred))\n\n\nlibrary(ggplot2)\nlibrary(viridis)\n\nWarning: package 'viridis' was built under R version 4.4.3\n\n\nLoading required package: viridisLite\n\n\n\nAttaching package: 'viridis'\n\n\nThe following object is masked from 'package:scales':\n\n    viridis_pal\n\nggplot(predictions, aes(x = .pred, y = logQmean)) +\n  geom_point(aes(color = abs(logQmean - .pred)), alpha = 0.7) +\n  scale_color_viridis_c(option = \"magma\") +\n  labs(\n    title = \"Observed vs. Predicted Streamflow\",\n    x = \"Predicted Log(Qmean)\",\n    y = \"Observed Log(Qmean)\",\n    color = \"Prediction Error\"\n  ) +\n  theme_minimal()"
  },
  {
    "objectID": "hyperparameter-tuning.html",
    "href": "hyperparameter-tuning.html",
    "title": "Lab 7: Hyperparameter Tuning",
    "section": "",
    "text": "Reading in the data and cleaning it\n\nlibrary(tidyverse)\n\nWarning: package 'readr' was built under R version 4.4.3\n\n\nWarning: package 'purrr' was built under R version 4.4.3\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(tidymodels)\n\n── Attaching packages ────────────────────────────────────── tidymodels 1.2.0 ──\n✔ broom        1.0.7     ✔ rsample      1.2.1\n✔ dials        1.3.0     ✔ tune         1.2.1\n✔ infer        1.0.7     ✔ workflows    1.1.4\n✔ modeldata    1.4.0     ✔ workflowsets 1.1.0\n✔ parsnip      1.3.1     ✔ yardstick    1.3.1\n✔ recipes      1.1.0     \n\n\nWarning: package 'scales' was built under R version 4.4.3\n\n\nWarning: package 'parsnip' was built under R version 4.4.3\n\n\n── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──\n✖ scales::discard() masks purrr::discard()\n✖ dplyr::filter()   masks stats::filter()\n✖ recipes::fixed()  masks stringr::fixed()\n✖ dplyr::lag()      masks stats::lag()\n✖ yardstick::spec() masks readr::spec()\n✖ recipes::step()   masks stats::step()\n• Use tidymodels_prefer() to resolve common conflicts."
  }
]